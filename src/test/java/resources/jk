所有的调用都会被转换成Wrapper的实现Wrapper0
package com.alibaba.dubbo.common.bytecode;


/**
 * Copyright (C) 2017-2018 https://www.htouhui.com - A project by dubbo
 *
 * @author xh.d
 * @since 2018/7/16 15:48
 */
public class Wrapper0 extends Wrapper {

    public static String[] pns;
    public static java.util.Map pts;
    public static String[] mns;
    public static String[] dmns;
    public static Class[] mts0;

    @Override
    public String[] getPropertyNames() {
        return pns;
    }

    @Override
    public Class<?> getPropertyType(String pn) {
        return (Class) pts.get(pn);
    }

    @Override
    public boolean hasProperty(String n) {
        return pts.containsKey(n);
    }

    @Override
    public Object getPropertyValue(Object o, String n) {
        com.fdubbo.rpc.impl.LogServiceImpl w;
        try {
            w = ((com.fdubbo.rpc.impl.LogServiceImpl) o);
        } catch (Throwable e) {
            throw new IllegalArgumentException(e);
        }
        throw new com.alibaba.dubbo.common.bytecode.NoSuchPropertyException("Not found property \"" + n + "\" filed or setter method in class com.fdubbo.rpc.impl.LogServiceImpl.");
    }

    @Override
    public void setPropertyValue(Object o, String n, Object v) {
        com.fdubbo.rpc.impl.LogServiceImpl w;
        try {
            w = ((com.fdubbo.rpc.impl.LogServiceImpl) o);
        } catch (Throwable e) {
            throw new IllegalArgumentException(e);
        }
        throw new com.alibaba.dubbo.common.bytecode.NoSuchPropertyException("Not found property \"" + v + "\" filed or setter method in class com.fdubbo.rpc.impl.LogServiceImpl.");
    }

    @Override
    public String[] getMethodNames() {
        return mns;
    }

    @Override
    public String[] getDeclaredMethodNames() {
        return dmns;
    }

    @Override
    public Object invokeMethod(Object o, String n, Class[] p, Object[] v) throws java.lang.reflect.InvocationTargetException {
        com.fdubbo.rpc.impl.LogServiceImpl w;
        try {
            w = ((com.fdubbo.rpc.impl.LogServiceImpl) o);
        } catch (Throwable e) {
            throw new IllegalArgumentException(e);
        }
        try {
            if ("showVersion".equals(n) && p.length == 1) {
                w.showVersion((java.lang.String) v[0]);
                return null;
            }
        } catch (Throwable e) {
            throw new java.lang.reflect.InvocationTargetException(e);
        }
        throw new com.alibaba.dubbo.common.bytecode.NoSuchMethodException("Not found method \"" + n + "\" in class com.fdubbo.rpc.impl.LogServiceImpl.");
    }
}


然后会有内部类
return new AbstractProxyInvoker<T>(proxy, type, url) {
            @Override
            protected Object doInvoke(T proxy, String methodName,
                                      Class<?>[] parameterTypes,
                                      Object[] arguments) throws Throwable {
                return wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);
            }
        };
编译后该内部类会被标识为JavassistProxyFactory$1,这也是真正的执行invoker.
wrapper0==>JavassistProxyFactory$1==>invokerDelegete,然后invokerDelegate会被重新export,此次的协议为DubboProtocol.这里会进行真正的Exporter,形成DubboExporter,执行DubboExporter<T> exporter = new DubboExporter<T>(invoker, key, exporterMap);并保存在缓存中。然后
会有两个装饰类装饰,DubboExporter经过ProtocolFilterListenerWrapper会形成一个拥有群组过滤器链路的invoker内部类ProtocolFilterListenerWrapper$1,然后经过ProtocolListenerWrapper形成新的ListenerExporterWrapper
最终的链条为wrapper0==>JavassistProxyFactory$1==>invokerDelegete=>DubboExporter=>ProtocolFilterListenerWrapper$1==>ListenerExporterWrapper
这里有一个invoker向exporter转换的过程
